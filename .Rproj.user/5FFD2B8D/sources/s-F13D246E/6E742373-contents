## The below two functions are used to save time when calculating the inverse of a matrix.
## If the inverse has already been calculated it will be retrieved from the cache instead of being recalculated.

## The makeCacheMatrix() function creates a "matrix" object.  The output is a list containing four functions.
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
  inverse <- NULL
  set <- function(y) {
      x <<- y
      inverse <<- NULL
  }
  get <- function() x
  setinverse <- function(matr_inv) inverse <<- matr_inv
  getinverse <- function() inverse
  list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}


## The cacheSolve() function calculates the inverse of the matrix object provided by the above function.
## It first checks to see if the inverse of the matrix has already been calculated, and if so skips the 
## calculation and retrieves the inverse from the cache.

cacheSolve <- function(x, ...) {
        inverse <- x$getinverse()
        if(!is.null(inverse)) {
          message("getting cached data")
          return(inverse)}
        matr <- x$get()
        inverse <- solve(matr)
        x$setinverse(inverse)
        inverse
}
